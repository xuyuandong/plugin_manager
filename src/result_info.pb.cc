// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "result_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace antifraud {

void protobuf_ShutdownFile_result_5finfo_2eproto() {
  delete ResultInfo::default_instance_;
}

void protobuf_AddDesc_result_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ResultInfo::default_instance_ = new ResultInfo();
  ResultInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_result_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_result_5finfo_2eproto {
  StaticDescriptorInitializer_result_5finfo_2eproto() {
    protobuf_AddDesc_result_5finfo_2eproto();
  }
} static_descriptor_initializer_result_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ResultInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

ResultInfo::ResultInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResultInfo::InitAsDefaultInstance() {
}

ResultInfo::ResultInfo(const ResultInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResultInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultInfo::~ResultInfo() {
  SharedDtor();
}

void ResultInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResultInfo& ResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_result_5finfo_2eproto();  return *default_instance_;
}

ResultInfo* ResultInfo::default_instance_ = NULL;

ResultInfo* ResultInfo::New() const {
  return new ResultInfo;
}

void ResultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }
  
}

int ResultInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResultInfo*>(&from));
}

void ResultInfo::MergeFrom(const ResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void ResultInfo::CopyFrom(const ResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultInfo::IsInitialized() const {
  
  return true;
}

void ResultInfo::Swap(ResultInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResultInfo::GetTypeName() const {
  return "antifraud.ResultInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace antifraud

// @@protoc_insertion_point(global_scope)
