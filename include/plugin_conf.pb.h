// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_conf.proto

#ifndef PROTOBUF_plugin_5fconf_2eproto__INCLUDED
#define PROTOBUF_plugin_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace antifraud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plugin_5fconf_2eproto();
void protobuf_AssignDesc_plugin_5fconf_2eproto();
void protobuf_ShutdownFile_plugin_5fconf_2eproto();

class PluginInfo;
class PluginSet;

// ===================================================================

class PluginInfo : public ::google::protobuf::Message {
 public:
  PluginInfo();
  virtual ~PluginInfo();
  
  PluginInfo(const PluginInfo& from);
  
  inline PluginInfo& operator=(const PluginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginInfo& default_instance();
  
  void Swap(PluginInfo* other);
  
  // implements Message ----------------------------------------------
  
  PluginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginInfo& from);
  void MergeFrom(const PluginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional string create_symbol = 3;
  inline bool has_create_symbol() const;
  inline void clear_create_symbol();
  static const int kCreateSymbolFieldNumber = 3;
  inline const ::std::string& create_symbol() const;
  inline void set_create_symbol(const ::std::string& value);
  inline void set_create_symbol(const char* value);
  inline void set_create_symbol(const char* value, size_t size);
  inline ::std::string* mutable_create_symbol();
  inline ::std::string* release_create_symbol();
  
  // optional string delete_symbol = 4;
  inline bool has_delete_symbol() const;
  inline void clear_delete_symbol();
  static const int kDeleteSymbolFieldNumber = 4;
  inline const ::std::string& delete_symbol() const;
  inline void set_delete_symbol(const ::std::string& value);
  inline void set_delete_symbol(const char* value);
  inline void set_delete_symbol(const char* value, size_t size);
  inline ::std::string* mutable_delete_symbol();
  inline ::std::string* release_delete_symbol();
  
  // @@protoc_insertion_point(class_scope:antifraud.PluginInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_create_symbol();
  inline void clear_has_create_symbol();
  inline void set_has_delete_symbol();
  inline void clear_has_delete_symbol();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* path_;
  ::std::string* create_symbol_;
  ::std::string* delete_symbol_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_plugin_5fconf_2eproto();
  friend void protobuf_AssignDesc_plugin_5fconf_2eproto();
  friend void protobuf_ShutdownFile_plugin_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static PluginInfo* default_instance_;
};
// -------------------------------------------------------------------

class PluginSet : public ::google::protobuf::Message {
 public:
  PluginSet();
  virtual ~PluginSet();
  
  PluginSet(const PluginSet& from);
  
  inline PluginSet& operator=(const PluginSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginSet& default_instance();
  
  void Swap(PluginSet* other);
  
  // implements Message ----------------------------------------------
  
  PluginSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginSet& from);
  void MergeFrom(const PluginSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .antifraud.PluginInfo plugins = 1;
  inline int plugins_size() const;
  inline void clear_plugins();
  static const int kPluginsFieldNumber = 1;
  inline const ::antifraud::PluginInfo& plugins(int index) const;
  inline ::antifraud::PluginInfo* mutable_plugins(int index);
  inline ::antifraud::PluginInfo* add_plugins();
  inline const ::google::protobuf::RepeatedPtrField< ::antifraud::PluginInfo >&
      plugins() const;
  inline ::google::protobuf::RepeatedPtrField< ::antifraud::PluginInfo >*
      mutable_plugins();
  
  // @@protoc_insertion_point(class_scope:antifraud.PluginSet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::antifraud::PluginInfo > plugins_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_plugin_5fconf_2eproto();
  friend void protobuf_AssignDesc_plugin_5fconf_2eproto();
  friend void protobuf_ShutdownFile_plugin_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static PluginSet* default_instance_;
};
// ===================================================================


// ===================================================================

// PluginInfo

// required string name = 1;
inline bool PluginInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PluginInfo::name() const {
  return *name_;
}
inline void PluginInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PluginInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PluginInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PluginInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 2;
inline bool PluginInfo::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginInfo::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PluginInfo::path() const {
  return *path_;
}
inline void PluginInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PluginInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PluginInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PluginInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string create_symbol = 3;
inline bool PluginInfo::has_create_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PluginInfo::set_has_create_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PluginInfo::clear_has_create_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PluginInfo::clear_create_symbol() {
  if (create_symbol_ != &::google::protobuf::internal::kEmptyString) {
    create_symbol_->clear();
  }
  clear_has_create_symbol();
}
inline const ::std::string& PluginInfo::create_symbol() const {
  return *create_symbol_;
}
inline void PluginInfo::set_create_symbol(const ::std::string& value) {
  set_has_create_symbol();
  if (create_symbol_ == &::google::protobuf::internal::kEmptyString) {
    create_symbol_ = new ::std::string;
  }
  create_symbol_->assign(value);
}
inline void PluginInfo::set_create_symbol(const char* value) {
  set_has_create_symbol();
  if (create_symbol_ == &::google::protobuf::internal::kEmptyString) {
    create_symbol_ = new ::std::string;
  }
  create_symbol_->assign(value);
}
inline void PluginInfo::set_create_symbol(const char* value, size_t size) {
  set_has_create_symbol();
  if (create_symbol_ == &::google::protobuf::internal::kEmptyString) {
    create_symbol_ = new ::std::string;
  }
  create_symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginInfo::mutable_create_symbol() {
  set_has_create_symbol();
  if (create_symbol_ == &::google::protobuf::internal::kEmptyString) {
    create_symbol_ = new ::std::string;
  }
  return create_symbol_;
}
inline ::std::string* PluginInfo::release_create_symbol() {
  clear_has_create_symbol();
  if (create_symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_symbol_;
    create_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string delete_symbol = 4;
inline bool PluginInfo::has_delete_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PluginInfo::set_has_delete_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PluginInfo::clear_has_delete_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PluginInfo::clear_delete_symbol() {
  if (delete_symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete_symbol_->clear();
  }
  clear_has_delete_symbol();
}
inline const ::std::string& PluginInfo::delete_symbol() const {
  return *delete_symbol_;
}
inline void PluginInfo::set_delete_symbol(const ::std::string& value) {
  set_has_delete_symbol();
  if (delete_symbol_ == &::google::protobuf::internal::kEmptyString) {
    delete_symbol_ = new ::std::string;
  }
  delete_symbol_->assign(value);
}
inline void PluginInfo::set_delete_symbol(const char* value) {
  set_has_delete_symbol();
  if (delete_symbol_ == &::google::protobuf::internal::kEmptyString) {
    delete_symbol_ = new ::std::string;
  }
  delete_symbol_->assign(value);
}
inline void PluginInfo::set_delete_symbol(const char* value, size_t size) {
  set_has_delete_symbol();
  if (delete_symbol_ == &::google::protobuf::internal::kEmptyString) {
    delete_symbol_ = new ::std::string;
  }
  delete_symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PluginInfo::mutable_delete_symbol() {
  set_has_delete_symbol();
  if (delete_symbol_ == &::google::protobuf::internal::kEmptyString) {
    delete_symbol_ = new ::std::string;
  }
  return delete_symbol_;
}
inline ::std::string* PluginInfo::release_delete_symbol() {
  clear_has_delete_symbol();
  if (delete_symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = delete_symbol_;
    delete_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PluginSet

// repeated .antifraud.PluginInfo plugins = 1;
inline int PluginSet::plugins_size() const {
  return plugins_.size();
}
inline void PluginSet::clear_plugins() {
  plugins_.Clear();
}
inline const ::antifraud::PluginInfo& PluginSet::plugins(int index) const {
  return plugins_.Get(index);
}
inline ::antifraud::PluginInfo* PluginSet::mutable_plugins(int index) {
  return plugins_.Mutable(index);
}
inline ::antifraud::PluginInfo* PluginSet::add_plugins() {
  return plugins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::antifraud::PluginInfo >&
PluginSet::plugins() const {
  return plugins_;
}
inline ::google::protobuf::RepeatedPtrField< ::antifraud::PluginInfo >*
PluginSet::mutable_plugins() {
  return &plugins_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace antifraud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plugin_5fconf_2eproto__INCLUDED
