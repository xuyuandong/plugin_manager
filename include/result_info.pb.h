// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result_info.proto

#ifndef PROTOBUF_result_5finfo_2eproto__INCLUDED
#define PROTOBUF_result_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace antifraud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_result_5finfo_2eproto();
void protobuf_AssignDesc_result_5finfo_2eproto();
void protobuf_ShutdownFile_result_5finfo_2eproto();

class ResultInfo;

// ===================================================================

class ResultInfo : public ::google::protobuf::MessageLite {
 public:
  ResultInfo();
  virtual ~ResultInfo();
  
  ResultInfo(const ResultInfo& from);
  
  inline ResultInfo& operator=(const ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ResultInfo& default_instance();
  
  void Swap(ResultInfo* other);
  
  // implements Message ----------------------------------------------
  
  ResultInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResultInfo& from);
  void MergeFrom(const ResultInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:antifraud.ResultInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_result_5finfo_2eproto();
  friend void protobuf_AssignDesc_result_5finfo_2eproto();
  friend void protobuf_ShutdownFile_result_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static ResultInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ResultInfo

// optional bool flag = 1;
inline bool ResultInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultInfo::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool ResultInfo::flag() const {
  return flag_;
}
inline void ResultInfo::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace antifraud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_result_5finfo_2eproto__INCLUDED
